
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000066  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000026e  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000182  00000000  00000000  000003e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000012c  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000164  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b0  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	0b d0       	rcall	.+22     	; 0x4a <main>
  34:	16 c0       	rjmp	.+44     	; 0x62 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <spi_si>:

/* SPI slave initialize */
void spi_si()
{
	/* Set MISO output, all others input */
	DDR_SPI = (1 << DD_MISO);
  38:	80 e1       	ldi	r24, 0x10	; 16
  3a:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI */
	SPCR = (1 << SPE);
  3c:	80 e4       	ldi	r24, 0x40	; 64
  3e:	8d b9       	out	0x0d, r24	; 13
  40:	08 95       	ret

00000042 <spi_srd>:

/* SPI slave receive data */
char spi_srd()
{
	/* Wait for reception complete */
	while(!(SPSR & (1 << SPIF)));
  42:	77 9b       	sbis	0x0e, 7	; 14
  44:	fe cf       	rjmp	.-4      	; 0x42 <spi_srd>
	/* Return data register */
	return SPDR;
  46:	8f b1       	in	r24, 0x0f	; 15
}
  48:	08 95       	ret

0000004a <main>:
	}
}

int main()
{
	spi_si();
  4a:	f6 df       	rcall	.-20     	; 0x38 <spi_si>

void write_reg(volatile uint8_t *reg, char value, char pos)
{
	if (value)
	{
		*reg |= (1 << pos);
  4c:	a0 9a       	sbi	0x14, 0	; 20
	}
	else
	{
		*reg &= ~(1 << pos);
  4e:	a8 98       	cbi	0x15, 0	; 21
	spi_si();
	write_reg(&DDRC, 1, 0);
	write_reg(&PORTC, 0, 0);
	while (1)
	{
		char input = spi_srd();
  50:	f8 df       	rcall	.-16     	; 0x42 <spi_srd>
		if (input == 0xFF)
  52:	8f 3f       	cpi	r24, 0xFF	; 255
  54:	11 f4       	brne	.+4      	; 0x5a <main+0x10>

void write_reg(volatile uint8_t *reg, char value, char pos)
{
	if (value)
	{
		*reg |= (1 << pos);
  56:	a8 9a       	sbi	0x15, 0	; 21
  58:	fb cf       	rjmp	.-10     	; 0x50 <main+0x6>
		char input = spi_srd();
		if (input == 0xFF)
		{
			write_reg(&PORTC, 1, 0);
		} 
		else if (input == 0x00)
  5a:	81 11       	cpse	r24, r1
  5c:	f9 cf       	rjmp	.-14     	; 0x50 <main+0x6>
	{
		*reg |= (1 << pos);
	}
	else
	{
		*reg &= ~(1 << pos);
  5e:	a8 98       	cbi	0x15, 0	; 21
  60:	f7 cf       	rjmp	.-18     	; 0x50 <main+0x6>

00000062 <_exit>:
  62:	f8 94       	cli

00000064 <__stop_program>:
  64:	ff cf       	rjmp	.-2      	; 0x64 <__stop_program>
